---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import HeaderLink from "../components/HeaderLink.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";
import { ViewTransitions } from "astro:transitions";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />

    <style>
      b {
        color: var(--accent);
      }
      .work-status {
        font-size: 0.8rem !important;
        padding-inline: 0.5rem;
        background-color: var(--accent);
        border-radius: var(--radius);
        color: white;
      }
      .gradient-border {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 40vh;
        z-index: 0;
        pointer-events: none;
      }
      .tooltip {
        position: relative;
        display: inline-block;
        font-size: 1rem !important;
        font-weight: 600 !important;
        color: var(--accent);
        border-bottom: 1px dashed var(--accent);
      }
      .avatar-img {
        pointer-events: none;
        width: 70px;
        height: 70px;
        object-position: bottom;
        border-radius: 50%;
        margin-left: 20px;
        object-fit: cover;
        -webkit-transform: scaleX(-1);
        transform: scaleX(-1);
        border: 3px solid white;
        @media (min-width: 768px) {
          width: 80px;
          height: 80px;
        }
      }
      /* Tooltip text */
      .tooltip .tooltiptext {
        visibility: hidden;
        width: 250px;
        background-color: var(--background);
        color: var(--accent);
        padding: 15px 15px;
        top: 80%;
        opacity: 0.9;
        border-radius: var(--radius);
        color: var(--accent);
        position: absolute;
        z-index: 1;
        font-size: 0.8rem;
        transition-duration: 400ms;
        opacity: 0;
        -webkit-perspective: 1000;
        transform: translateY(10px);
      }

      .tooltip:hover .tooltiptext {
        visibility: visible;
        overflow: hidden;
        width: 250px;
        opacity: 1;
        transition-duration: 400ms;
        transform: translateY(0px);
        tranform: translateX(0px);
        box-shadow: var(--shadow);
      }
      main {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: start;
        overflow: hidden;
        z-index: 1;
        height: 100vh !important;
        padding-inline: 2rem;
        overflow-y: hidden;
      }
      .animate {
        animation: animate-background 0.6s linear;
      }
      .flex {
        display: flex;
        width: 100%;
        flex-direction: row;
        justify-content: space-between;
        padding-bottom: 0px;
        align-items: baseline;
      }
      @keyframes animate-background {
        0% {
          opacity: 0%;
        }
        50% {
          opacity: 50%;
        }
        100% {
          opacity: 100%;
        }
      }
    </style>
    <script>
      function sleep(ms: number) {
        return new Promise((resolve) => setTimeout(resolve, ms));
      }

      for (let i = 0; i < 1500; i++) {
        const gridItem = document.getElementById(
          `grid-item-${(Math.random() * 450).toFixed(0)}`
        );
        if (!gridItem) continue;

        // #e8f9f0
        //grid item
        gridItem.style.transitionDuration = "500ms";
        gridItem.style.backgroundColor = `hsl(148, 59%, ${
          85 + Math.random() * 20
        }%)`;
        if (i % 2 == 0) gridItem.style.backgroundColor = `#fff`;
        gridItem.style.rotate = `${45}deg`;
        // notification circle
        await sleep(250);
        gridItem.style.transitionDuration = "11400ms";

        gridItem.style.backgroundColor = ``;
      }
    </script>
  </head>
  <body>
    <div class="background-grid">
      {
        Array.from({ length: 27 }).map((_, i) => (
          <div class="background-grid-item" id={`grid-item-${i}`} />
        ))
      }
    </div>
    <div class="gradient-border"></div>
    <main class="main">
      <div
        style="display: flex; flex-direction: row; justify-content: end; padding-bottom: 0px; align-items: center; width: 100%; pointer-events: none ;"
      >
        <img src="/eror.jpg" class="avatar-img" />
      </div>
      <div class="animate">
        <p class="tooltip">
          Tung

          <span class="tooltiptext">
            Albanian abvr of tungjatj√©ta; used as a greeting with the meaning
            "live long!".</span
          >
        </p>
      </div>
      <div class="animate">
        <p class="animate">
          I'm <HeaderLink href="/about"><b>Eror Saini</b></HeaderLink>, a
          developer, and the founder of <HeaderLink
            href="https://ebarnatorja.com"
          >
            <b>eBarnatorja</b>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              height="14"
              width="12"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="lucide lucide-arrow-up-right"
              ><path d="M7 7h10v10"></path><path d="M7 17 17 7"></path></svg
            >
          </HeaderLink>, Kosovo's first digital pharmacy.

          <!-- <p class="animate">
            I occasionally <HeaderLink href="/blog">
              <b>blog</b>
            </HeaderLink> to challenge myself to write more and to document my thoughts
            and ideas for posterity.
          </p>
        </p> -->
          <div class="flex">
            <Header title={SITE_TITLE} />
            <div class="animate notif-container">
              <p class="work-status">Open for opportunities</p>
            </div>
          </div>
        </p>
      </div>
    </main>
  </body>
</html>
